// Code generated by MockGen. DO NOT EDIT.
// Source: util/error.go

// Package util is a generated GoMock package.
package util

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockErrorHandlerInterface is a mock of ErrorHandlerInterface interface
type MockErrorHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockErrorHandlerInterfaceMockRecorder
}

// MockErrorHandlerInterfaceMockRecorder is the mock recorder for MockErrorHandlerInterface
type MockErrorHandlerInterfaceMockRecorder struct {
	mock *MockErrorHandlerInterface
}

// NewMockErrorHandlerInterface creates a new mock instance
func NewMockErrorHandlerInterface(ctrl *gomock.Controller) *MockErrorHandlerInterface {
	mock := &MockErrorHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockErrorHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockErrorHandlerInterface) EXPECT() *MockErrorHandlerInterfaceMockRecorder {
	return m.recorder
}

// ExitOnError mocks base method
func (m *MockErrorHandlerInterface) ExitOnError(arg0 error, arg1 ...string) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ExitOnError", varargs...)
}

// ExitOnError indicates an expected call of ExitOnError
func (mr *MockErrorHandlerInterfaceMockRecorder) ExitOnError(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitOnError", reflect.TypeOf((*MockErrorHandlerInterface)(nil).ExitOnError), varargs...)
}
